#!/bin/bash
export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

time_a=""
time_b=""
ticker=()
width=()
ticket_str=";(" 

COMMAND=()

LOG=()
LOG_ZIP=()

print_help() {
	echo "Použití: tradelog [-h|--help] [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]"
	echo
	echo "PŘÍKAZ může být jeden z:
		list-tick – výpis seznamu vyskytujících se burzovních symbolů, tzv. “tickerů”.
		profit – výpis celkového zisku z uzavřených pozic.
		pos – výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty.
		last-price – výpis poslední známé ceny pro každý ticker.
		hist-ord – výpis histogramu počtu transakcí dle tickeru.
		graph-pos – výpis grafu hodnot držených pozic dle tickeru."
	echo
	echo "FILTR může být kombinace následujících:
		-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data). DATETIME je formátu YYYY-MM-DD HH:MM:SS.
		-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data).
		-t TICKER – jsou uvažovány pouze záznamy odpovídající danému tickeru. Při více výskytech přepínače se bere množina všech uvedených tickerů.
		-w WIDTH – u výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH. Tedy, WIDTH musí být kladné celé číslo. Více výskytů přepínače je chybné spuštění.
		-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."
}

for arg in "$@"
do
	printf "\"$1\""
	printf "\n"
	case "$1" in 
		"-h"|"--help")
			print_help
			exit 0
			;;
		"-a")
			time_a="$2"
			shift
			shift
			;;
		"-b")
			time_b="$2"
			shift
			shift
			;;
		"-t")
			ticket_str+="$2|"
			shift
			shift
			;;
		"-w")
			width=("${width[@]}" "$2")
			shift
			shift
			;;
		list-tick|profit|pos|last-price|hist-ord|graph-pos)
			COMMAND=("${COMMAND[@]}" "$1")
			shift
			;;

		*.gz)
			LOG_ZIP=("${LOG_ZIP[@]}" "$1")
			shift
			;;
		*)
			LOG=("${LOG[@]}" "$1")
			shift
			;;
	esac
done
ticket_str+=");"

if [ ${#LOG_ZIP[@]} -ne 0 ]
then
	LOG_FILTERED="gzip -dcq ${LOG_ZIP[@]} | cat - ${LOG[@]}"
else 
	LOG_FILTERED="cat ${LOG[@]}"
fi

if [ ${#COMMAND[@]} -gt 1 ]
then
	echo "error: multiple commands"
	exit 1
fi

if [ ${#width[@]} -gt 1 ]
then
	echo "error: -w"
	exit 1
fi

if [ ${#ticket_str} -gt 4 ]
then
	LOG_FILTERED="$LOG_FILTERED | grep -E "'$ticket_str'""
fi

if [ ${#time_a} -gt 0 ]
then
	if ! echo $time_a | grep -q "^[0-9]\{4\}[ -][0-9]\{2\}[ -][0-9]\{2\} [0-9]\{2\}[ :][0-9]\{2\}[ :][0-9]\{2\}$"
	then
		echo "error: -a date format"
		exit 1
	else
		LOG_FILTERED="$LOG_FILTERED | awk -F ';' -v AT='"$time_a"' '{if(\$1 > AT){print \$0}}'"
	fi
fi

if [ ${#time_b} -gt 0 ]
then
	if ! echo $time_b | grep -q "^[0-9]\{4\}[ -][0-9]\{2\}[ -][0-9]\{2\} [0-9]\{2\}[ :][0-9]\{2\}[ :][0-9]\{2\}$"
	then
		echo "error: -b date format"
		exit 1
	else
		LOG_FILTERED="$LOG_FILTERED | awk -F ';' -v BT='"$time_b"' '{if(\$1 < BT){print \$0}}'"
	fi
fi

### list-tick ###
if [ "$COMMAND" == "list-tick" ]
then
	eval $LOG_FILTERED | awk -F ';' '{print $2}' | sort -u
	exit 0 	
fi

### profit ###
if [ "$COMMAND" == "profit" ]
then
	eval $LOG_FILTERED | 
	awk -F ';' '$3 ~ /sell/{sellsum=sellsum+$4*$6} 
				$3 ~ /buy/{buysum=buysum+$4*$6} 
				END{printf("%.2f\n", sellsum-buysum)}'
	exit 0
fi
### pos ### 
if [ "$COMMAND" == "pos" ]
then
	eval $LOG_FILTERED | 
	awk -F ';' '{lt[$2]=$4; 
				if($3 == "sell"){s[$2]+=$6} else{b[$2]+=$6}} 
				END{for(i in s){printf("%s:%.2f\n", i, (b[i]-s[i])*lt[i])}}' |
	sort -t ':' -nrk 2 | 
	awk -F ':' '{max=(length($2)>max ? length($2) : max); t[i++]=$1; pos[j++]=$2} 
				END{for(j=0;j<i;j++){printf("%-10s:%*.2f\n", t[j], max+1, pos[j])}}'
	exit 0
fi

### last-price ###
if [ "$COMMAND" == "last-price" ]
then
	eval $LOG_FILTERED | 
	awk -F ';' '{lp[$2]=$4}
				{max=(length(lp[$2]) > max ? length(lp[$2]) : max)}
				END{for(i in lp){printf("%-10s:%*.2f\n", i, max+1, lp[i])}}' | 
	sort -t ':' -k 1
	exit 0
fi

### hist-ord ### 
if [ "$COMMAND" == "hist-ord" ]
then
	eval $LOG_FILTERED | 
	awk -F ';' -v w=$width '{a[$2]++}END{{for(i in a){if(a[i]>max) max=a[i]}};m=(w=="" ? 1 : max/w);
							for(i in a){printf("%-10s: ", i);
							for(j=0;j<int(a[i]/m);j++){printf "#"}printf "\n"}}' |
	sort
	exit 0
fi

### graph-pos ###
if [ "$COMMAND" == "graph-pos" ]
then
	eval $LOG_FILTERED | 
	awk -F ';' '{lt[$2]=$4; if($3 == "sell"){s[$2]+=$6} else{b[$2]+=$6}} 
				END{for(i in s){printf("%s:%.2f\n", i, (b[i]-s[i])*lt[i])}}' |
 	awk -F ':' -v w=$width '{val[$1]=$2} END{{for(i in val){
							if((length(val[i])>=length(max)) && ((val[i]<0 ? -val[i] : val[i])>max))
							{max=(val[i]<0 ? -val[i] : val[i])}}}
							{m=(w=="" ? 1000 : max/w); if(m<0)m=-m}
							{for(i in val){printf("%-10s: ", i);for(j=0;j<(val[i]>=0 ? int(val[i]/m) : int(-val[i]/m));j++)
							{printf(val[i])>=0 ? "#" : "!"}printf "\n"}}}' |
	sort

	exit 0
fi

eval $LOG_FILTERED